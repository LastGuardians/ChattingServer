// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocols.proto

#include "Protocols.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Protocols {
class User_LoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_Login>
      _instance;
} _User_Login_default_instance_;
class Enter_ChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Enter_Channel>
      _instance;
} _Enter_Channel_default_instance_;
class Change_ChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_Channel>
      _instance;
} _Change_Channel_default_instance_;
class Channel_ChattingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Channel_Chatting>
      _instance;
} _Channel_Chatting_default_instance_;
class Create_RoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Create_Room>
      _instance;
} _Create_Room_default_instance_;
class Room_ChattingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Room_Chatting>
      _instance;
} _Room_Chatting_default_instance_;
class Enter_RoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Enter_Room>
      _instance;
} _Enter_Room_default_instance_;
class Leave_RoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Leave_Room>
      _instance;
} _Leave_Room_default_instance_;
class Notify_Exist_RoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notify_Exist_Room>
      _instance;
} _Notify_Exist_Room_default_instance_;
class Notify_Enter_RoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notify_Enter_Room>
      _instance;
} _Notify_Enter_Room_default_instance_;
class Notify_Leave_RoomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notify_Leave_Room>
      _instance;
} _Notify_Leave_Room_default_instance_;
class Room_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Room_List>
      _instance;
} _Room_List_default_instance_;
}  // namespace Protocols
namespace protobuf_Protocols_2eproto {
void InitDefaultsUser_LoginImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_User_Login_default_instance_;
    new (ptr) ::Protocols::User_Login();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::User_Login::InitAsDefaultInstance();
}

void InitDefaultsUser_Login() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUser_LoginImpl);
}

void InitDefaultsEnter_ChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Enter_Channel_default_instance_;
    new (ptr) ::Protocols::Enter_Channel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Enter_Channel::InitAsDefaultInstance();
}

void InitDefaultsEnter_Channel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnter_ChannelImpl);
}

void InitDefaultsChange_ChannelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Change_Channel_default_instance_;
    new (ptr) ::Protocols::Change_Channel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Change_Channel::InitAsDefaultInstance();
}

void InitDefaultsChange_Channel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChange_ChannelImpl);
}

void InitDefaultsChannel_ChattingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Channel_Chatting_default_instance_;
    new (ptr) ::Protocols::Channel_Chatting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Channel_Chatting::InitAsDefaultInstance();
}

void InitDefaultsChannel_Chatting() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChannel_ChattingImpl);
}

void InitDefaultsCreate_RoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Create_Room_default_instance_;
    new (ptr) ::Protocols::Create_Room();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Create_Room::InitAsDefaultInstance();
}

void InitDefaultsCreate_Room() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreate_RoomImpl);
}

void InitDefaultsRoom_ChattingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Room_Chatting_default_instance_;
    new (ptr) ::Protocols::Room_Chatting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Room_Chatting::InitAsDefaultInstance();
}

void InitDefaultsRoom_Chatting() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoom_ChattingImpl);
}

void InitDefaultsEnter_RoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Enter_Room_default_instance_;
    new (ptr) ::Protocols::Enter_Room();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Enter_Room::InitAsDefaultInstance();
}

void InitDefaultsEnter_Room() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnter_RoomImpl);
}

void InitDefaultsLeave_RoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Leave_Room_default_instance_;
    new (ptr) ::Protocols::Leave_Room();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Leave_Room::InitAsDefaultInstance();
}

void InitDefaultsLeave_Room() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLeave_RoomImpl);
}

void InitDefaultsNotify_Exist_RoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Notify_Exist_Room_default_instance_;
    new (ptr) ::Protocols::Notify_Exist_Room();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Notify_Exist_Room::InitAsDefaultInstance();
}

void InitDefaultsNotify_Exist_Room() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNotify_Exist_RoomImpl);
}

void InitDefaultsNotify_Enter_RoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Notify_Enter_Room_default_instance_;
    new (ptr) ::Protocols::Notify_Enter_Room();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Notify_Enter_Room::InitAsDefaultInstance();
}

void InitDefaultsNotify_Enter_Room() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNotify_Enter_RoomImpl);
}

void InitDefaultsNotify_Leave_RoomImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Notify_Leave_Room_default_instance_;
    new (ptr) ::Protocols::Notify_Leave_Room();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Notify_Leave_Room::InitAsDefaultInstance();
}

void InitDefaultsNotify_Leave_Room() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNotify_Leave_RoomImpl);
}

void InitDefaultsRoom_ListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Protocols::_Room_List_default_instance_;
    new (ptr) ::Protocols::Room_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Protocols::Room_List::InitAsDefaultInstance();
}

void InitDefaultsRoom_List() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoom_ListImpl);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::User_Login, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::User_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::User_Login, user_pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::User_Login, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::User_Login, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::User_Login, success_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Channel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Channel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Channel, channelindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Change_Channel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Change_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Change_Channel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Change_Channel, channelindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Channel_Chatting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Channel_Chatting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Channel_Chatting, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Channel_Chatting, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Create_Room, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Create_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Create_Room, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Create_Room, roomindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_Chatting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_Chatting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_Chatting, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_Chatting, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Room, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Room, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Room, roomindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Enter_Room, isenter_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Leave_Room, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Leave_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Leave_Room, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Leave_Room, roomindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Exist_Room, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Exist_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Exist_Room, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Exist_Room, roomindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Exist_Room, exist_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Enter_Room, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Enter_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Enter_Room, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Leave_Room, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Leave_Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Notify_Leave_Room, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_List, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_List, userlist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_List, roomindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Protocols::Room_List, usercount_),
  0,
  ~0u,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::Protocols::User_Login)},
  { 13, 20, sizeof(::Protocols::Enter_Channel)},
  { 22, 29, sizeof(::Protocols::Change_Channel)},
  { 31, 38, sizeof(::Protocols::Channel_Chatting)},
  { 40, 47, sizeof(::Protocols::Create_Room)},
  { 49, 56, sizeof(::Protocols::Room_Chatting)},
  { 58, 66, sizeof(::Protocols::Enter_Room)},
  { 69, 76, sizeof(::Protocols::Leave_Room)},
  { 78, 86, sizeof(::Protocols::Notify_Exist_Room)},
  { 89, 95, sizeof(::Protocols::Notify_Enter_Room)},
  { 96, 102, sizeof(::Protocols::Notify_Leave_Room)},
  { 103, 112, sizeof(::Protocols::Room_List)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_User_Login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Enter_Channel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Change_Channel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Channel_Chatting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Create_Room_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Room_Chatting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Enter_Room_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Leave_Room_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Notify_Exist_Room_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Notify_Enter_Room_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Notify_Leave_Room_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Protocols::_Room_List_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Protocols.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017Protocols.proto\022\tProtocols\"R\n\nUser_Log"
      "in\022\020\n\010user_pid\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\t\022\020\n"
      "\010password\030\003 \001(\t\022\017\n\007success\030\004 \001(\010\"1\n\rEnte"
      "r_Channel\022\n\n\002id\030\001 \001(\005\022\024\n\014channelIndex\030\002 "
      "\002(\005\"2\n\016Change_Channel\022\n\n\002id\030\001 \001(\005\022\024\n\014cha"
      "nnelIndex\030\002 \002(\005\"/\n\020Channel_Chatting\022\n\n\002i"
      "d\030\001 \001(\005\022\017\n\007message\030\002 \002(\t\",\n\013Create_Room\022"
      "\n\n\002id\030\001 \001(\005\022\021\n\troomIndex\030\002 \002(\005\",\n\rRoom_C"
      "hatting\022\n\n\002id\030\001 \001(\005\022\017\n\007message\030\002 \002(\t\"<\n\n"
      "Enter_Room\022\n\n\002id\030\001 \001(\005\022\021\n\troomIndex\030\002 \002("
      "\005\022\017\n\007isEnter\030\003 \001(\010\"+\n\nLeave_Room\022\n\n\002id\030\001"
      " \001(\005\022\021\n\troomIndex\030\002 \002(\005\"A\n\021Notify_Exist_"
      "Room\022\n\n\002id\030\001 \001(\005\022\021\n\troomIndex\030\002 \002(\005\022\r\n\005e"
      "xist\030\003 \001(\010\"\037\n\021Notify_Enter_Room\022\n\n\002id\030\001 "
      "\001(\005\"\037\n\021Notify_Leave_Room\022\n\n\002id\030\001 \001(\005\"O\n\t"
      "Room_List\022\n\n\002id\030\001 \001(\005\022\020\n\010userList\030\002 \003(\005\022"
      "\021\n\troomIndex\030\003 \002(\005\022\021\n\tuserCount\030\004 \001(\005*\361\001"
      "\n\nPacketType\022\021\n\rENTER_CHANNEL\020\001\022\016\n\nUSER_"
      "LOGIN\020\002\022\017\n\013CREATE_ROOM\020\003\022\022\n\016CHANGE_CHANN"
      "EL\020\004\022\025\n\021NOTIFY_ENTER_ROOM\020\005\022\025\n\021NOTIFY_LE"
      "AVE_ROOM\020\006\022\025\n\021NOTIFY_EXIST_ROOM\020\007\022\021\n\rROO"
      "M_CHATTING\020\010\022\016\n\nENTER_ROOM\020\t\022\r\n\tROOM_LIS"
      "T\020\n\022\024\n\020CHANNEL_CHATTING\020\013\022\016\n\nLEAVE_ROOM\020"
      "\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 921);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocols.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Protocols_2eproto
namespace Protocols {
const ::google::protobuf::EnumDescriptor* PacketType_descriptor() {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Protocols_2eproto::file_level_enum_descriptors[0];
}
bool PacketType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void User_Login::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_Login::kUserPidFieldNumber;
const int User_Login::kUserIdFieldNumber;
const int User_Login::kPasswordFieldNumber;
const int User_Login::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_Login::User_Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsUser_Login();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.User_Login)
}
User_Login::User_Login(const User_Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&user_pid_, &from.user_pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&user_pid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:Protocols.User_Login)
}

void User_Login::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&user_pid_)) + sizeof(success_));
}

User_Login::~User_Login() {
  // @@protoc_insertion_point(destructor:Protocols.User_Login)
  SharedDtor();
}

void User_Login::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User_Login::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_Login& User_Login::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsUser_Login();
  return *internal_default_instance();
}

User_Login* User_Login::New(::google::protobuf::Arena* arena) const {
  User_Login* n = new User_Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.User_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&user_pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&user_pid_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.User_Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocols.User_Login.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocols.User_Login.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.User_Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.User_Login)
  return false;
#undef DO_
}

void User_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.User_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_pid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_pid(), output);
  }

  // optional string user_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.User_Login.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.User_Login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.User_Login)
}

::google::protobuf::uint8* User_Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.User_Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_pid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_pid(), target);
  }

  // optional string user_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.User_Login.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.User_Login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.User_Login)
  return target;
}

size_t User_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.User_Login)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 user_pid = 1;
    if (has_user_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_pid());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User_Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.User_Login)
  GOOGLE_DCHECK_NE(&from, this);
  const User_Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.User_Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.User_Login)
    MergeFrom(*source);
  }
}

void User_Login::MergeFrom(const User_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.User_Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      user_pid_ = from.user_pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void User_Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.User_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_Login::CopyFrom(const User_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.User_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Login::IsInitialized() const {
  return true;
}

void User_Login::Swap(User_Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_Login::InternalSwap(User_Login* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_);
  password_.Swap(&other->password_);
  swap(user_pid_, other->user_pid_);
  swap(success_, other->success_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User_Login::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Enter_Channel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Enter_Channel::kIdFieldNumber;
const int Enter_Channel::kChannelIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Enter_Channel::Enter_Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsEnter_Channel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Enter_Channel)
}
Enter_Channel::Enter_Channel(const Enter_Channel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelindex_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channelindex_));
  // @@protoc_insertion_point(copy_constructor:Protocols.Enter_Channel)
}

void Enter_Channel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelindex_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channelindex_));
}

Enter_Channel::~Enter_Channel() {
  // @@protoc_insertion_point(destructor:Protocols.Enter_Channel)
  SharedDtor();
}

void Enter_Channel::SharedDtor() {
}

void Enter_Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Enter_Channel::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Enter_Channel& Enter_Channel::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsEnter_Channel();
  return *internal_default_instance();
}

Enter_Channel* Enter_Channel::New(::google::protobuf::Arena* arena) const {
  Enter_Channel* n = new Enter_Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Enter_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Enter_Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channelindex_) -
        reinterpret_cast<char*>(&id_)) + sizeof(channelindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Enter_Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Enter_Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 channelIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channelindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Enter_Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Enter_Channel)
  return false;
#undef DO_
}

void Enter_Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Enter_Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 channelIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channelindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Enter_Channel)
}

::google::protobuf::uint8* Enter_Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Enter_Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 channelIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channelindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Enter_Channel)
  return target;
}

size_t Enter_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Enter_Channel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 channelIndex = 2;
  if (has_channelindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channelindex());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Enter_Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Enter_Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Enter_Channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Enter_Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Enter_Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Enter_Channel)
    MergeFrom(*source);
  }
}

void Enter_Channel::MergeFrom(const Enter_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Enter_Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channelindex_ = from.channelindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Enter_Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Enter_Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enter_Channel::CopyFrom(const Enter_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Enter_Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enter_Channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Enter_Channel::Swap(Enter_Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Enter_Channel::InternalSwap(Enter_Channel* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(channelindex_, other->channelindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Enter_Channel::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_Channel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_Channel::kIdFieldNumber;
const int Change_Channel::kChannelIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_Channel::Change_Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsChange_Channel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Change_Channel)
}
Change_Channel::Change_Channel(const Change_Channel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelindex_) -
    reinterpret_cast<char*>(&id_)) + sizeof(channelindex_));
  // @@protoc_insertion_point(copy_constructor:Protocols.Change_Channel)
}

void Change_Channel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelindex_) -
      reinterpret_cast<char*>(&id_)) + sizeof(channelindex_));
}

Change_Channel::~Change_Channel() {
  // @@protoc_insertion_point(destructor:Protocols.Change_Channel)
  SharedDtor();
}

void Change_Channel::SharedDtor() {
}

void Change_Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Change_Channel::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_Channel& Change_Channel::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsChange_Channel();
  return *internal_default_instance();
}

Change_Channel* Change_Channel::New(::google::protobuf::Arena* arena) const {
  Change_Channel* n = new Change_Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Change_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Change_Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channelindex_) -
        reinterpret_cast<char*>(&id_)) + sizeof(channelindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Change_Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 channelIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_channelindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Change_Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Change_Channel)
  return false;
#undef DO_
}

void Change_Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Change_Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 channelIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channelindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Change_Channel)
}

::google::protobuf::uint8* Change_Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Change_Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 channelIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channelindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Change_Channel)
  return target;
}

size_t Change_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Change_Channel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 channelIndex = 2;
  if (has_channelindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channelindex());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Change_Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Change_Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_Channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Change_Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Change_Channel)
    MergeFrom(*source);
  }
}

void Change_Channel::MergeFrom(const Change_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Change_Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channelindex_ = from.channelindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Change_Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_Channel::CopyFrom(const Change_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Change_Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_Channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Change_Channel::Swap(Change_Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_Channel::InternalSwap(Change_Channel* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(channelindex_, other->channelindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Change_Channel::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Channel_Chatting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel_Chatting::kIdFieldNumber;
const int Channel_Chatting::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel_Chatting::Channel_Chatting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsChannel_Chatting();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Channel_Chatting)
}
Channel_Chatting::Channel_Chatting(const Channel_Chatting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Protocols.Channel_Chatting)
}

void Channel_Chatting::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Channel_Chatting::~Channel_Chatting() {
  // @@protoc_insertion_point(destructor:Protocols.Channel_Chatting)
  SharedDtor();
}

void Channel_Chatting::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Channel_Chatting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel_Chatting::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Channel_Chatting& Channel_Chatting::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsChannel_Chatting();
  return *internal_default_instance();
}

Channel_Chatting* Channel_Chatting::New(::google::protobuf::Arena* arena) const {
  Channel_Chatting* n = new Channel_Chatting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channel_Chatting::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Channel_Chatting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Channel_Chatting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Channel_Chatting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocols.Channel_Chatting.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Channel_Chatting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Channel_Chatting)
  return false;
#undef DO_
}

void Channel_Chatting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Channel_Chatting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.Channel_Chatting.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Channel_Chatting)
}

::google::protobuf::uint8* Channel_Chatting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Channel_Chatting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.Channel_Chatting.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Channel_Chatting)
  return target;
}

size_t Channel_Chatting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Channel_Chatting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string message = 2;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel_Chatting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Channel_Chatting)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel_Chatting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel_Chatting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Channel_Chatting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Channel_Chatting)
    MergeFrom(*source);
  }
}

void Channel_Chatting::MergeFrom(const Channel_Chatting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Channel_Chatting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Channel_Chatting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Channel_Chatting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel_Chatting::CopyFrom(const Channel_Chatting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Channel_Chatting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel_Chatting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Channel_Chatting::Swap(Channel_Chatting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel_Chatting::InternalSwap(Channel_Chatting* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channel_Chatting::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Create_Room::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Create_Room::kIdFieldNumber;
const int Create_Room::kRoomIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Create_Room::Create_Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsCreate_Room();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Create_Room)
}
Create_Room::Create_Room(const Create_Room& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomindex_) -
    reinterpret_cast<char*>(&id_)) + sizeof(roomindex_));
  // @@protoc_insertion_point(copy_constructor:Protocols.Create_Room)
}

void Create_Room::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomindex_) -
      reinterpret_cast<char*>(&id_)) + sizeof(roomindex_));
}

Create_Room::~Create_Room() {
  // @@protoc_insertion_point(destructor:Protocols.Create_Room)
  SharedDtor();
}

void Create_Room::SharedDtor() {
}

void Create_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Create_Room::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Create_Room& Create_Room::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsCreate_Room();
  return *internal_default_instance();
}

Create_Room* Create_Room::New(::google::protobuf::Arena* arena) const {
  Create_Room* n = new Create_Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Create_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Create_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomindex_) -
        reinterpret_cast<char*>(&id_)) + sizeof(roomindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Create_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Create_Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 roomIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_roomindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Create_Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Create_Room)
  return false;
#undef DO_
}

void Create_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Create_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Create_Room)
}

::google::protobuf::uint8* Create_Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Create_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Create_Room)
  return target;
}

size_t Create_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Create_Room)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 roomIndex = 2;
  if (has_roomindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomindex());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Create_Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Create_Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Create_Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Create_Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Create_Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Create_Room)
    MergeFrom(*source);
  }
}

void Create_Room::MergeFrom(const Create_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Create_Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomindex_ = from.roomindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Create_Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Create_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Create_Room::CopyFrom(const Create_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Create_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Create_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Create_Room::Swap(Create_Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Create_Room::InternalSwap(Create_Room* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(roomindex_, other->roomindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Create_Room::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Room_Chatting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room_Chatting::kIdFieldNumber;
const int Room_Chatting::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room_Chatting::Room_Chatting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsRoom_Chatting();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Room_Chatting)
}
Room_Chatting::Room_Chatting(const Room_Chatting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Protocols.Room_Chatting)
}

void Room_Chatting::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Room_Chatting::~Room_Chatting() {
  // @@protoc_insertion_point(destructor:Protocols.Room_Chatting)
  SharedDtor();
}

void Room_Chatting::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Room_Chatting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_Chatting::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room_Chatting& Room_Chatting::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsRoom_Chatting();
  return *internal_default_instance();
}

Room_Chatting* Room_Chatting::New(::google::protobuf::Arena* arena) const {
  Room_Chatting* n = new Room_Chatting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room_Chatting::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Room_Chatting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room_Chatting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Room_Chatting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Protocols.Room_Chatting.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Room_Chatting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Room_Chatting)
  return false;
#undef DO_
}

void Room_Chatting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Room_Chatting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.Room_Chatting.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Room_Chatting)
}

::google::protobuf::uint8* Room_Chatting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Room_Chatting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Protocols.Room_Chatting.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Room_Chatting)
  return target;
}

size_t Room_Chatting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Room_Chatting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string message = 2;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_Chatting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Room_Chatting)
  GOOGLE_DCHECK_NE(&from, this);
  const Room_Chatting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room_Chatting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Room_Chatting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Room_Chatting)
    MergeFrom(*source);
  }
}

void Room_Chatting::MergeFrom(const Room_Chatting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Room_Chatting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room_Chatting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Room_Chatting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_Chatting::CopyFrom(const Room_Chatting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Room_Chatting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_Chatting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Room_Chatting::Swap(Room_Chatting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room_Chatting::InternalSwap(Room_Chatting* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room_Chatting::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Enter_Room::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Enter_Room::kIdFieldNumber;
const int Enter_Room::kRoomIndexFieldNumber;
const int Enter_Room::kIsEnterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Enter_Room::Enter_Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsEnter_Room();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Enter_Room)
}
Enter_Room::Enter_Room(const Enter_Room& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&isenter_) -
    reinterpret_cast<char*>(&id_)) + sizeof(isenter_));
  // @@protoc_insertion_point(copy_constructor:Protocols.Enter_Room)
}

void Enter_Room::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isenter_) -
      reinterpret_cast<char*>(&id_)) + sizeof(isenter_));
}

Enter_Room::~Enter_Room() {
  // @@protoc_insertion_point(destructor:Protocols.Enter_Room)
  SharedDtor();
}

void Enter_Room::SharedDtor() {
}

void Enter_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Enter_Room::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Enter_Room& Enter_Room::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsEnter_Room();
  return *internal_default_instance();
}

Enter_Room* Enter_Room::New(::google::protobuf::Arena* arena) const {
  Enter_Room* n = new Enter_Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Enter_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Enter_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isenter_) -
        reinterpret_cast<char*>(&id_)) + sizeof(isenter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Enter_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Enter_Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 roomIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_roomindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isEnter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_isenter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isenter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Enter_Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Enter_Room)
  return false;
#undef DO_
}

void Enter_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Enter_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomindex(), output);
  }

  // optional bool isEnter = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isenter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Enter_Room)
}

::google::protobuf::uint8* Enter_Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Enter_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomindex(), target);
  }

  // optional bool isEnter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isenter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Enter_Room)
  return target;
}

size_t Enter_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Enter_Room)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 roomIndex = 2;
  if (has_roomindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomindex());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bool isEnter = 3;
  if (has_isenter()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Enter_Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Enter_Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Enter_Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Enter_Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Enter_Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Enter_Room)
    MergeFrom(*source);
  }
}

void Enter_Room::MergeFrom(const Enter_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Enter_Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomindex_ = from.roomindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      isenter_ = from.isenter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Enter_Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Enter_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enter_Room::CopyFrom(const Enter_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Enter_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enter_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Enter_Room::Swap(Enter_Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Enter_Room::InternalSwap(Enter_Room* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(roomindex_, other->roomindex_);
  swap(isenter_, other->isenter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Enter_Room::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Leave_Room::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leave_Room::kIdFieldNumber;
const int Leave_Room::kRoomIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leave_Room::Leave_Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsLeave_Room();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Leave_Room)
}
Leave_Room::Leave_Room(const Leave_Room& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomindex_) -
    reinterpret_cast<char*>(&id_)) + sizeof(roomindex_));
  // @@protoc_insertion_point(copy_constructor:Protocols.Leave_Room)
}

void Leave_Room::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomindex_) -
      reinterpret_cast<char*>(&id_)) + sizeof(roomindex_));
}

Leave_Room::~Leave_Room() {
  // @@protoc_insertion_point(destructor:Protocols.Leave_Room)
  SharedDtor();
}

void Leave_Room::SharedDtor() {
}

void Leave_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leave_Room::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Leave_Room& Leave_Room::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsLeave_Room();
  return *internal_default_instance();
}

Leave_Room* Leave_Room::New(::google::protobuf::Arena* arena) const {
  Leave_Room* n = new Leave_Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Leave_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Leave_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomindex_) -
        reinterpret_cast<char*>(&id_)) + sizeof(roomindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Leave_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Leave_Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 roomIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_roomindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Leave_Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Leave_Room)
  return false;
#undef DO_
}

void Leave_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Leave_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Leave_Room)
}

::google::protobuf::uint8* Leave_Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Leave_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Leave_Room)
  return target;
}

size_t Leave_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Leave_Room)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 roomIndex = 2;
  if (has_roomindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomindex());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leave_Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Leave_Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Leave_Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leave_Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Leave_Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Leave_Room)
    MergeFrom(*source);
  }
}

void Leave_Room::MergeFrom(const Leave_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Leave_Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomindex_ = from.roomindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Leave_Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Leave_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leave_Room::CopyFrom(const Leave_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Leave_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leave_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Leave_Room::Swap(Leave_Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leave_Room::InternalSwap(Leave_Room* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(roomindex_, other->roomindex_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leave_Room::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Notify_Exist_Room::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notify_Exist_Room::kIdFieldNumber;
const int Notify_Exist_Room::kRoomIndexFieldNumber;
const int Notify_Exist_Room::kExistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notify_Exist_Room::Notify_Exist_Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsNotify_Exist_Room();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Notify_Exist_Room)
}
Notify_Exist_Room::Notify_Exist_Room(const Notify_Exist_Room& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exist_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exist_));
  // @@protoc_insertion_point(copy_constructor:Protocols.Notify_Exist_Room)
}

void Notify_Exist_Room::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exist_));
}

Notify_Exist_Room::~Notify_Exist_Room() {
  // @@protoc_insertion_point(destructor:Protocols.Notify_Exist_Room)
  SharedDtor();
}

void Notify_Exist_Room::SharedDtor() {
}

void Notify_Exist_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notify_Exist_Room::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notify_Exist_Room& Notify_Exist_Room::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsNotify_Exist_Room();
  return *internal_default_instance();
}

Notify_Exist_Room* Notify_Exist_Room::New(::google::protobuf::Arena* arena) const {
  Notify_Exist_Room* n = new Notify_Exist_Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Notify_Exist_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Notify_Exist_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exist_) -
        reinterpret_cast<char*>(&id_)) + sizeof(exist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Notify_Exist_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Notify_Exist_Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 roomIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_roomindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exist = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_exist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Notify_Exist_Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Notify_Exist_Room)
  return false;
#undef DO_
}

void Notify_Exist_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Notify_Exist_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomindex(), output);
  }

  // optional bool exist = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->exist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Notify_Exist_Room)
}

::google::protobuf::uint8* Notify_Exist_Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Notify_Exist_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 roomIndex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomindex(), target);
  }

  // optional bool exist = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->exist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Notify_Exist_Room)
  return target;
}

size_t Notify_Exist_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Notify_Exist_Room)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 roomIndex = 2;
  if (has_roomindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomindex());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional bool exist = 3;
  if (has_exist()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notify_Exist_Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Notify_Exist_Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Notify_Exist_Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notify_Exist_Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Notify_Exist_Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Notify_Exist_Room)
    MergeFrom(*source);
  }
}

void Notify_Exist_Room::MergeFrom(const Notify_Exist_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Notify_Exist_Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomindex_ = from.roomindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      exist_ = from.exist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Notify_Exist_Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Notify_Exist_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notify_Exist_Room::CopyFrom(const Notify_Exist_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Notify_Exist_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notify_Exist_Room::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Notify_Exist_Room::Swap(Notify_Exist_Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notify_Exist_Room::InternalSwap(Notify_Exist_Room* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(roomindex_, other->roomindex_);
  swap(exist_, other->exist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Notify_Exist_Room::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Notify_Enter_Room::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notify_Enter_Room::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notify_Enter_Room::Notify_Enter_Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsNotify_Enter_Room();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Notify_Enter_Room)
}
Notify_Enter_Room::Notify_Enter_Room(const Notify_Enter_Room& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Protocols.Notify_Enter_Room)
}

void Notify_Enter_Room::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
}

Notify_Enter_Room::~Notify_Enter_Room() {
  // @@protoc_insertion_point(destructor:Protocols.Notify_Enter_Room)
  SharedDtor();
}

void Notify_Enter_Room::SharedDtor() {
}

void Notify_Enter_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notify_Enter_Room::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notify_Enter_Room& Notify_Enter_Room::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsNotify_Enter_Room();
  return *internal_default_instance();
}

Notify_Enter_Room* Notify_Enter_Room::New(::google::protobuf::Arena* arena) const {
  Notify_Enter_Room* n = new Notify_Enter_Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Notify_Enter_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Notify_Enter_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Notify_Enter_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Notify_Enter_Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Notify_Enter_Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Notify_Enter_Room)
  return false;
#undef DO_
}

void Notify_Enter_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Notify_Enter_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Notify_Enter_Room)
}

::google::protobuf::uint8* Notify_Enter_Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Notify_Enter_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Notify_Enter_Room)
  return target;
}

size_t Notify_Enter_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Notify_Enter_Room)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notify_Enter_Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Notify_Enter_Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Notify_Enter_Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notify_Enter_Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Notify_Enter_Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Notify_Enter_Room)
    MergeFrom(*source);
  }
}

void Notify_Enter_Room::MergeFrom(const Notify_Enter_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Notify_Enter_Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void Notify_Enter_Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Notify_Enter_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notify_Enter_Room::CopyFrom(const Notify_Enter_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Notify_Enter_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notify_Enter_Room::IsInitialized() const {
  return true;
}

void Notify_Enter_Room::Swap(Notify_Enter_Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notify_Enter_Room::InternalSwap(Notify_Enter_Room* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Notify_Enter_Room::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Notify_Leave_Room::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notify_Leave_Room::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notify_Leave_Room::Notify_Leave_Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsNotify_Leave_Room();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Notify_Leave_Room)
}
Notify_Leave_Room::Notify_Leave_Room(const Notify_Leave_Room& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Protocols.Notify_Leave_Room)
}

void Notify_Leave_Room::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
}

Notify_Leave_Room::~Notify_Leave_Room() {
  // @@protoc_insertion_point(destructor:Protocols.Notify_Leave_Room)
  SharedDtor();
}

void Notify_Leave_Room::SharedDtor() {
}

void Notify_Leave_Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notify_Leave_Room::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notify_Leave_Room& Notify_Leave_Room::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsNotify_Leave_Room();
  return *internal_default_instance();
}

Notify_Leave_Room* Notify_Leave_Room::New(::google::protobuf::Arena* arena) const {
  Notify_Leave_Room* n = new Notify_Leave_Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Notify_Leave_Room::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Notify_Leave_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Notify_Leave_Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Notify_Leave_Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Notify_Leave_Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Notify_Leave_Room)
  return false;
#undef DO_
}

void Notify_Leave_Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Notify_Leave_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Notify_Leave_Room)
}

::google::protobuf::uint8* Notify_Leave_Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Notify_Leave_Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Notify_Leave_Room)
  return target;
}

size_t Notify_Leave_Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Notify_Leave_Room)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notify_Leave_Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Notify_Leave_Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Notify_Leave_Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notify_Leave_Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Notify_Leave_Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Notify_Leave_Room)
    MergeFrom(*source);
  }
}

void Notify_Leave_Room::MergeFrom(const Notify_Leave_Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Notify_Leave_Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void Notify_Leave_Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Notify_Leave_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notify_Leave_Room::CopyFrom(const Notify_Leave_Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Notify_Leave_Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notify_Leave_Room::IsInitialized() const {
  return true;
}

void Notify_Leave_Room::Swap(Notify_Leave_Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notify_Leave_Room::InternalSwap(Notify_Leave_Room* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Notify_Leave_Room::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Room_List::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room_List::kIdFieldNumber;
const int Room_List::kUserListFieldNumber;
const int Room_List::kRoomIndexFieldNumber;
const int Room_List::kUserCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room_List::Room_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Protocols_2eproto::InitDefaultsRoom_List();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protocols.Room_List)
}
Room_List::Room_List(const Room_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      userlist_(from.userlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&usercount_) -
    reinterpret_cast<char*>(&id_)) + sizeof(usercount_));
  // @@protoc_insertion_point(copy_constructor:Protocols.Room_List)
}

void Room_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usercount_) -
      reinterpret_cast<char*>(&id_)) + sizeof(usercount_));
}

Room_List::~Room_List() {
  // @@protoc_insertion_point(destructor:Protocols.Room_List)
  SharedDtor();
}

void Room_List::SharedDtor() {
}

void Room_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_List::descriptor() {
  ::protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room_List& Room_List::default_instance() {
  ::protobuf_Protocols_2eproto::InitDefaultsRoom_List();
  return *internal_default_instance();
}

Room_List* Room_List::New(::google::protobuf::Arena* arena) const {
  Room_List* n = new Room_List;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room_List::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocols.Room_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usercount_) -
        reinterpret_cast<char*>(&id_)) + sizeof(usercount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protocols.Room_List)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 userList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_userlist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userlist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 roomIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_roomindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 userCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_usercount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protocols.Room_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protocols.Room_List)
  return false;
#undef DO_
}

void Room_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protocols.Room_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 userList = 2;
  for (int i = 0, n = this->userlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->userlist(i), output);
  }

  // required int32 roomIndex = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomindex(), output);
  }

  // optional int32 userCount = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usercount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protocols.Room_List)
}

::google::protobuf::uint8* Room_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Protocols.Room_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 userList = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->userlist_, target);

  // required int32 roomIndex = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomindex(), target);
  }

  // optional int32 userCount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usercount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocols.Room_List)
  return target;
}

size_t Room_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocols.Room_List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 roomIndex = 3;
  if (has_roomindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roomindex());
  }
  // repeated int32 userList = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->userlist_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->userlist_size());
    total_size += data_size;
  }

  // optional int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 userCount = 4;
  if (has_usercount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usercount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocols.Room_List)
  GOOGLE_DCHECK_NE(&from, this);
  const Room_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocols.Room_List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocols.Room_List)
    MergeFrom(*source);
  }
}

void Room_List::MergeFrom(const Room_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocols.Room_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userlist_.MergeFrom(from.userlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomindex_ = from.roomindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      usercount_ = from.usercount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocols.Room_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_List::CopyFrom(const Room_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocols.Room_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_List::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Room_List::Swap(Room_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room_List::InternalSwap(Room_List* other) {
  using std::swap;
  userlist_.InternalSwap(&other->userlist_);
  swap(id_, other->id_);
  swap(roomindex_, other->roomindex_);
  swap(usercount_, other->usercount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room_List::GetMetadata() const {
  protobuf_Protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Protocols_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocols

// @@protoc_insertion_point(global_scope)
