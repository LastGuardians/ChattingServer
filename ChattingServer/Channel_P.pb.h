// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Channel_P.proto

#ifndef PROTOBUF_Channel_5fP_2eproto__INCLUDED
#define PROTOBUF_Channel_5fP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Channel_P {
class channel_chatting;
class channel_chattingDefaultTypeInternal;
extern channel_chattingDefaultTypeInternal _channel_chatting_default_instance_;
}  // namespace Channel_P

namespace Channel_P {

namespace protobuf_Channel_5fP_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Channel_5fP_2eproto

// ===================================================================

class channel_chatting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Channel_P.channel_chatting) */ {
 public:
  channel_chatting();
  virtual ~channel_chatting();

  channel_chatting(const channel_chatting& from);

  inline channel_chatting& operator=(const channel_chatting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_chatting& default_instance();

  static inline const channel_chatting* internal_default_instance() {
    return reinterpret_cast<const channel_chatting*>(
               &_channel_chatting_default_instance_);
  }

  void Swap(channel_chatting* other);

  // implements Message ----------------------------------------------

  inline channel_chatting* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_chatting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_chatting& from);
  void MergeFrom(const channel_chatting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_chatting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Channel_P.channel_chatting)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_target();
  void clear_has_target();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 target_;
  friend struct  protobuf_Channel_5fP_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_chatting

// required int32 id = 1;
inline bool channel_chatting::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void channel_chatting::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void channel_chatting::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void channel_chatting::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 channel_chatting::id() const {
  // @@protoc_insertion_point(field_get:Channel_P.channel_chatting.id)
  return id_;
}
inline void channel_chatting::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Channel_P.channel_chatting.id)
}

// required int32 target = 2;
inline bool channel_chatting::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void channel_chatting::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void channel_chatting::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void channel_chatting::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 channel_chatting::target() const {
  // @@protoc_insertion_point(field_get:Channel_P.channel_chatting.target)
  return target_;
}
inline void channel_chatting::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:Channel_P.channel_chatting.target)
}

// required string message = 3;
inline bool channel_chatting::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void channel_chatting::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void channel_chatting::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void channel_chatting::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& channel_chatting::message() const {
  // @@protoc_insertion_point(field_get:Channel_P.channel_chatting.message)
  return message_.GetNoArena();
}
inline void channel_chatting::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Channel_P.channel_chatting.message)
}
#if LANG_CXX11
inline void channel_chatting::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Channel_P.channel_chatting.message)
}
#endif
inline void channel_chatting::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Channel_P.channel_chatting.message)
}
inline void channel_chatting::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Channel_P.channel_chatting.message)
}
inline ::std::string* channel_chatting::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:Channel_P.channel_chatting.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_chatting::release_message() {
  // @@protoc_insertion_point(field_release:Channel_P.channel_chatting.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_chatting::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Channel_P.channel_chatting.message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Channel_P

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Channel_5fP_2eproto__INCLUDED
